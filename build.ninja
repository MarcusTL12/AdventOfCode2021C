build_dir = build/release
c_flags = -stdlib=libc
l_flags = -lpcre2-8 -lcrypto

rule cc
    command = clang -O3 -o $out -c $in

rule link
    command = clang $c_flags -o $out $in $l_flags

build $build_dir/day1.o: cc ./src/day1.c
build $build_dir/main.o: cc ./src/main.c
build $build_dir/vector.o: cc ./AoC_C_utils/src/vector.c
build $build_dir/number_theory.o: cc ./AoC_C_utils/src/number_theory.c
build $build_dir/regex_util.o: cc ./AoC_C_utils/src/regex_util.c
build $build_dir/md5_util.o: cc ./AoC_C_utils/src/md5_util.c
build $build_dir/bitfield.o: cc ./AoC_C_utils/src/bitfield.c
build $build_dir/combinatorics.o: cc ./AoC_C_utils/src/combinatorics.c
build $build_dir/deque.o: cc ./AoC_C_utils/src/deque.c
build $build_dir/str_split_iter.o: cc ./AoC_C_utils/src/str_split_iter.c
build $build_dir/file_util.o: cc ./AoC_C_utils/src/file_util.c

build a.out: link $
    $build_dir/day1.o $
    $build_dir/main.o $
    $build_dir/vector.o $
    $build_dir/number_theory.o $
    $build_dir/regex_util.o $
    $build_dir/md5_util.o $
    $build_dir/bitfield.o $
    $build_dir/combinatorics.o $
    $build_dir/deque.o $
    $build_dir/str_split_iter.o $
    $build_dir/file_util.o
